/**
 * Main extension entry point for Qoder Wiki Export
 * Handles extension activation, command registration, and lifecycle management
 */

import * as vscode from 'vscode';
import { executeExportCommand } from './commands/exportCommand';

/**
 * Extension activation function
 * Called when the extension is activated by VSCode
 * @param context - VSCode extension context
 */
export function activate(context: vscode.ExtensionContext) {
  console.log('Qoder Wiki Export extension is now active');

  // Register the main export command
  const exportCommand = vscode.commands.registerCommand(
    'qoderWikiExport.exportWiki',
    async () => {
      try {
        await executeExportCommand();
      } catch (error) {
        console.error('Error executing export command:', error);
        
        // Show generic error message if command execution fails unexpectedly
        const message = error instanceof Error 
          ? `Export command failed: ${error.message}`
          : 'Export command failed with an unknown error';
          
        vscode.window.showErrorMessage(message);
      }
    }
  );

  // Register the export selected documents command (alias for main command)
  const exportSelectedCommand = vscode.commands.registerCommand(
    'qoderWikiExport.exportSelected',
    async () => {
      try {
        await executeExportCommand();
      } catch (error) {
        console.error('Error executing export selected command:', error);
        
        const message = error instanceof Error 
          ? `Export command failed: ${error.message}`
          : 'Export command failed with an unknown error';
          
        vscode.window.showErrorMessage(message);
      }
    }
  );

  // Add commands to extension subscriptions for proper cleanup
  context.subscriptions.push(exportCommand);
  context.subscriptions.push(exportSelectedCommand);

  // Register additional commands that might be useful
  registerUtilityCommands(context);

  console.log('Qoder Wiki Export extension commands registered successfully');
}

/**
 * Registers additional utility commands for the extension
 * @param context - VSCode extension context
 */
function registerUtilityCommands(context: vscode.ExtensionContext) {
  // Command to check Qoder extension status
  const checkQoderStatusCommand = vscode.commands.registerCommand(
    'qoderWikiExport.checkQoderStatus',
    async () => {
      try {
        const { QoderApiServiceImpl } = await import('./services/qoderApiService');
        const qoderService = new QoderApiServiceImpl();
        
        const isAvailable = qoderService.isQoderAvailable();
        
        if (!isAvailable) {
          vscode.window.showWarningMessage(
            'Qoder extension is not available or not activated. Please ensure it is installed and activated.',
            'Open Extensions'
          ).then(action => {
            if (action === 'Open Extensions') {
              vscode.commands.executeCommand('workbench.view.extensions');
            }
          });
          return;
        }

        const isLoggedIn = await qoderService.isUserLoggedIn();
        
        if (isLoggedIn) {
          vscode.window.showInformationMessage('✅ Qoder is available and you are logged in. Ready to export!');
        } else {
          const action = await vscode.window.showWarningMessage(
            '⚠️ Qoder is available but you are not logged in. Please log in to export wiki documents.',
            'Login to Qoder'
          );
          
          if (action === 'Login to Qoder') {
            try {
              await vscode.commands.executeCommand('qoder.login');
            } catch (error) {
              vscode.window.showErrorMessage('Could not trigger Qoder login. Please log in manually.');
            }
          }
        }
        
      } catch (error) {
        console.error('Error checking Qoder status:', error);
        vscode.window.showErrorMessage(
          `Failed to check Qoder status: ${error instanceof Error ? error.message : 'Unknown error'}`
        );
      }
    }
  );

  // Command to show extension information
  const showInfoCommand = vscode.commands.registerCommand(
    'qoderWikiExport.showInfo',
    () => {
      const message = `
Qoder Wiki Export Extension

This extension allows you to export documentation generated by the Qoder extension to various formats.

Features:
• Export individual documents or entire wiki catalogs
• Markdown format support with preserved formatting
• Hierarchical folder structure preservation
• Progress tracking for large exports
• Error handling and retry logic

Requirements:
• Qoder extension must be installed and activated
• You must be logged in to Qoder
• Wiki documentation must be generated in Qoder

Commands:
• Export Wiki Documentation: Main export command
• Check Qoder Status: Verify Qoder availability and login status
      `.trim();

      vscode.window.showInformationMessage(message, { modal: true });
    }
  );

  context.subscriptions.push(checkQoderStatusCommand);
  context.subscriptions.push(showInfoCommand);
}

/**
 * Extension deactivation function
 * Called when the extension is deactivated by VSCode
 */
export function deactivate() {
  console.log('Qoder Wiki Export extension is being deactivated');
  
  // Perform any necessary cleanup here
  // Note: VSCode automatically disposes of registered commands and subscriptions
  
  console.log('Qoder Wiki Export extension deactivated successfully');
}